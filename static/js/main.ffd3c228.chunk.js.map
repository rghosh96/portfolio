{"version":3,"sources":["logo.svg","components/Home.js","components/About.js","components/Explore.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","props","state","toggle","menuClass0","subMenuClass0","msg0","menuClass1","subMenuClass1","msg1","menuClass2","subMenuClass2","msg2","menuClass3","subMenuClass3","msg3","toggled","type","console","log","this","setState","checkToggle","className","onClick","setToggle","React","Component","About","Explore","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ffd3c228.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState, useEffect} from 'react';\nimport '../css/home.css';\n\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      toggle: false,\n      menuClass0: \"expand\",\n      subMenuClass0: \"hidden\",\n      msg0: \"㊉\",\n      menuClass1: \"expand\",\n      subMenuClass1: \"hidden\",\n      msg1: \"㊉\",\n      menuClass2: \"expand\",\n      subMenuClass2: \"hidden\",\n      msg2: \"㊉\",\n      menuClass3: \"expand\",\n      subMenuClass3: \"hidden\",\n      msg3: \"㊉\"\n    };\n  }\n\n  setToggle(toggled, type){\n    console.log(toggled)\n    this.setState({\n      toggle: toggled\n    },\n    () => this.checkToggle(type) // callback function to guarantee called after state is updated\n    );\n  }\n\n  checkToggle(type) {\n    console.log(this.state.toggle)\n    if(this.state.toggle) {\n      switch(type) {\n        case 0:\n          this.setState({\n            menuClass0: \"expanded\",\n            subMenuClass0: \"show\",\n            msg0: \"-\"\n          });\n          break;\n        case 1:\n          this.setState({\n            menuClass1: \"expanded\",\n            subMenuClass1: \"show\",\n            msg1: \"-\"\n          });\n          break;\n        case 2:\n          this.setState({\n            menuClass2: \"expanded\",\n            subMenuClass2: \"show\",\n            msg2: \"-\"\n          });\n          break;\n        case 3:\n          this.setState({\n            menuClass3: \"expanded\",\n            subMenuClass3: \"show\",\n            msg3: \"-\"\n          });\n          break;\n        default:\n          console.log(\"error\")\n      }\n    } else {\n      switch(type) {\n        case 0:\n          this.setState({\n            menuClass0: \"expand\",\n            subMenuClass0: \"hidden\",\n            msg0: \"㊉\"\n          });\n          break;\n        case 1:\n          this.setState({\n            menuClass1: \"expand\",\n            subMenuClass1: \"hidden\",\n            msg1: \"㊉\"\n          });\n          break;\n        case 2:\n          this.setState({\n            menuClass2: \"expand\",\n            subMenuClass2: \"hidden\",\n            msg2: \"㊉\"\n          });\n          break;\n        case 3:\n          this.setState({\n            menuClass3: \"expand\",\n            subMenuClass3: \"hidden\",\n            msg3: \"㊉\"\n          });\n          break;\n        default:\n          console.log(\"error\")\n      }\n    }\n    \n  }\n\n  \n  \n\n  render() {\n    return (\n      <div className=\"home\">\n        <div className=\"menu\">\n          <h1>rashi ghosh</h1>\n\n          <span>\n            <h2 className=\"\">story</h2>\n            <h2 onClick = {() => this.setToggle(!this.state.toggle, 0)} className={this.state.menuClass0}>{this.state.msg0}</h2>\n          </span>\n          <div className={this.state.subMenuClass0}>hidden</div>\n\n          <span>\n            <h2 className=\"\">ingredients</h2>\n            <h2 onClick = {() => this.setToggle(!this.state.toggle, 1)} className={this.state.menuClass1}>{this.state.msg1}</h2>\n          </span>\n          <div className={this.state.subMenuClass1}>hidden</div>\n\n          <span>\n            <h2 className=\"\">nutrition facts</h2>\n            <h2 onClick = {() => this.setToggle(!this.state.toggle, 2)} className={this.state.menuClass2}>{this.state.msg2}</h2>\n          </span>\n          <div className={this.state.subMenuClass2}>hidden</div>\n\n          <span>\n            <h2 className=\"\">contact</h2>\n            <h2 onClick = {() => this.setToggle(!this.state.toggle, 3)} className={this.state.menuClass3}>{this.state.msg3}</h2>\n          </span>\n          <div className={this.state.subMenuClass3}>hidden</div>\n\n        </div>\n      </div>\n    )\n  }\n}","import React from 'react';\n\nexport default function About() {\n  return (\n    <div className=\"about\">\n        <h1>about</h1>\n    </div>\n  );\n}\n\n","import React from 'react';\n\nexport default function Explore() {\n  return (\n    <div className=\"explore\">\n        <h1>explore</h1>\n    </div>\n  );\n}\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './components/Home'\nimport About from './components/About'\nimport Explore from './components/Explore'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/portfolio/\" component={Home} />\n        <Route exact path=\"/portfolio/about\" component={About} />\n        <Route exact path=\"/portfolio/explore\" component={Explore} />\n      </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}