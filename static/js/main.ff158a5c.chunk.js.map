{"version":3,"sources":["components/pictur.png","logo.svg","components/Accordian.js","components/Home.js","components/About.js","components/Explore.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Accordion","props","useState","active","setActive","contentRef","useRef","useEffect","current","style","maxHeight","scrollHeight","className","onClick","fontWeight","fontSize","fontFamily","title","ref","children","Home","src","pic","alt","About","Explore","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,oC,4ECA3CD,EAAOC,QAAU,IAA0B,kC,yKCqC5BC,EAnCG,SAAAC,GAAU,IAAD,EACGC,oBAAS,GADZ,mBAClBC,EADkB,KACVC,EADU,KAEnBC,EAAaC,iBAAO,MAE1BC,qBAAU,WACRF,EAAWG,QAAQC,MAAMC,UAAYP,EAAM,UAAME,EAAWG,QAAQG,aAAzB,MAA4C,QACtF,CAACN,EAAYF,IAYhB,OACE,yBAAKS,UAAU,qBACb,4BAAQA,UAAU,kBAAkBC,QAZnB,WACnBT,GAAWD,KAYP,uBAAGM,MATU,CACjBK,WAAY,IACZC,SAAU,OACVC,WAAY,wBAMef,EAAMgB,OAC5Bd,EAAS,yBAAKS,UAAU,UAAf,UAAkC,yBAAKA,UAAU,YAAf,WAG9C,yBACEM,IAAKb,EACLO,UAAU,qBAETX,EAAMkB,Y,iBC1BA,SAASC,EAAKnB,GACzB,OACE,yBAAKW,UAAU,QACb,yBAAKS,IAAKC,IAAKC,IAAI,sBACnB,yBAAKX,UAAU,QACb,4CACA,mMAGA,kBAAC,EAAD,CAAWK,MAAM,SACnB,0BAAML,UAAU,kBAAhB,qBAEF,kBAAC,EAAD,CAAWK,MAAM,eACf,0BAAML,UAAU,kBAAhB,oBAEF,kBAAC,EAAD,CAAWK,MAAM,mBACf,0BAAML,UAAU,kBAAhB,oBAEF,kBAAC,EAAD,CAAWK,MAAM,WACf,0BAAML,UAAU,kBAAhB,sBCtBO,SAASY,IACtB,OACE,yBAAKZ,UAAU,SACX,sCCHO,SAASa,IACtB,OACE,yBAAKb,UAAU,WACX,wCCiBOc,MAdf,WACE,OACE,yBAAKd,UAAU,OACb,kBAAC,IAAD,KACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOe,OAAK,EAACC,KAAK,cAAcC,UAAWT,IAC3C,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,mBAAmBC,UAAWL,IAChD,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,qBAAqBC,UAAWJ,QCHtCK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ff158a5c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pictur.34c9738c.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useRef, useEffect } from 'react'\n\nconst Accordion = props => {\n  const [active, setActive] = useState(false)\n  const contentRef = useRef(null)\n\n  useEffect(() => {\n    contentRef.current.style.maxHeight = active ? `${contentRef.current.scrollHeight}px` : '0px'\n  }, [contentRef, active])\n\n  const toogleActive = () => {\n    setActive(!active)\n  }\n\n  const titleStyle = {\n    fontWeight: 600,\n    fontSize: '17px',\n    fontFamily: 'Raleway, sans-serif'\n  }\n\n  return (\n    <div className=\"accordion-section\">\n      <button className=\"accordion-title\" onClick={toogleActive}>\n        <p style={titleStyle}>{props.title}</p>\n        {active ? <div className=\"expand\">⊖</div> : <div className=\"expanded\">⊕</div>}\n      </button>\n\n      <div\n        ref={contentRef}\n        className=\"accordion-content\"\n      >\n        {props.children}\n      </div>\n    </div>\n  )\n}\n\nexport default Accordion","import React, {useState, useEffect, createRef} from 'react';\nimport '../css/home.css';\nimport Accordion from './Accordian.js'\nimport pic from './pictur.png';\n\nexport default function Home(props) {\n    return (\n      <div className=\"home\">\n        <img src={pic} alt=\"Flowers in Chania\"/>\n        <div className=\"menu\">\n          <h1> rashi ghosh</h1>\n          <p>deep seated fear of failure, broad political understandings, airs on the side of caution, \n            a few complexes, blended Indian culture with American exceptionalist ideas</p>\n\n          <Accordion title=\"story\">\n        <span className=\"accordion-text\">coming soon ! :)</span>\n      </Accordion>\n      <Accordion title=\"ingredients\">\n        <span className=\"accordion-text\">coming soon! :)</span>\n      </Accordion>\n      <Accordion title=\"nutrition facts\">\n        <span className=\"accordion-text\">coming soon! :)</span>\n      </Accordion>\n      <Accordion title=\"contact\">\n        <span className=\"accordion-text\">coming soon! :)</span>\n      </Accordion>\n\n\n        </div>\n      </div>\n    )\n  }","import React from 'react';\n\nexport default function About() {\n  return (\n    <div className=\"about\">\n        <h1>about</h1>\n    </div>\n  );\n}\n\n","import React from 'react';\n\nexport default function Explore() {\n  return (\n    <div className=\"explore\">\n        <h1>explore</h1>\n    </div>\n  );\n}\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './components/Home'\nimport About from './components/About'\nimport Explore from './components/Explore'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/portfolio/\" component={Home} />\n        <Route exact path=\"/portfolio/about\" component={About} />\n        <Route exact path=\"/portfolio/explore\" component={Explore} />\n      </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}