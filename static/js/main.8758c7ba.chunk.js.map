{"version":3,"sources":["components/Home.js","styles/themes.js","styles/global.js","components/Toggle.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","withTheme","props","console","log","className","Button","variant","color","theme","gold","icon","faUserCircle","size","faFileAlt","faCode","faEnvelope","lightTheme","mode","bg","text","lightShadow","darkShadow","toggleBorder","gradient","darkTheme","GlobalStyles","createGlobalStyle","ToggleContainer","styled","button","Toggle","toggleTheme","onClick","faSun","faMoon","App","useState","setTheme","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yTAoDiBA,EADEC,aA3CN,SAACC,GAEV,OADFC,QAAQC,IAAIF,GAER,yBAAKG,UAAU,kBACb,yBAAKA,UAAU,QACb,wBAAIA,UAAU,SAAd,eACA,uBAAGA,UAAU,YAAb,iEACA,6BACA,yBAAKA,UAAU,OACb,kBAACC,EAAA,EAAD,CAAQC,QAAQ,QACd,kBAAC,IAAD,CACEC,MAAON,EAAMO,MAAMC,KACnBC,KAAMC,IACNC,KAAK,QAGT,kBAACP,EAAA,EAAD,CAAQC,QAAQ,QAChB,kBAAC,IAAD,CACIC,MAAON,EAAMO,MAAMC,KACnBC,KAAMG,IACND,KAAK,QAGT,kBAACP,EAAA,EAAD,CAAQC,QAAQ,QAChB,kBAAC,IAAD,CACIC,MAAON,EAAMO,MAAMC,KACnBC,KAAMI,IACNF,KAAK,QAGT,kBAACP,EAAA,EAAD,CAAQC,QAAQ,QAChB,kBAAC,IAAD,CACIC,MAAON,EAAMO,MAAMC,KACnBC,KAAMK,IACNH,KAAK,cC1CRI,G,MAAa,CACxBC,KAAM,QACJC,GAAI,UACJC,KAAM,UACNC,YAAa,UACbC,WAAY,UACZZ,KAAM,UACNa,aAAc,OACdC,SAAU,sCAGCC,EAAY,CACvBP,KAAM,OACNC,GAAI,UACJC,KAAM,UACNC,YAAa,UACbC,WAAY,UACZZ,KAAM,UACNa,aAAc,UACdC,SAAU,qC,mrCCjBP,IAAME,EAAeC,YAAH,KAQP,qBAAGlB,MAAkBU,MAC1B,qBAAGV,MAAkBW,QAYrB,qBAAGX,MAAkBC,QAOrB,qBAAGD,MAAkBW,QAIV,qBAAGX,MAAkBC,QAW3B,qBAAGD,MAAkBU,MAEJ,qBAAGV,MAAkBa,cAC/B,qBAAGb,MAAkBY,eAMb,qBAAGZ,MAAkBa,cAC/B,qBAAGb,MAAkBY,e,2gBC/C5C,IAAMO,EAAkBC,IAAOC,OAAV,KACL,qBAAGrB,MAAkBU,MACf,qBAAGV,MAAkBC,QAiBxB,kBAA8B,UAA9B,EAAGD,MAAkBS,KAAmB,gBAAkB,uBAK1D,kBAA8B,UAA9B,EAAGT,MAAkBS,KAAmB,qBAAuB,mBA2BnEa,EAtBA,SAAC,GAA2B,EAAzBtB,MAA0B,IAAnBuB,EAAkB,EAAlBA,YACvB,OACE,kBAACJ,EAAD,CAAiBK,QAASD,GACvB,kBAAC,IAAD,CAAiB3B,UAAU,QAClBG,MAAO,UACPG,KAAMuB,IACNrB,KAAK,OAEd,kBAAC,IAAD,CAAiBR,UAAU,OAClBG,MAAO,UACPG,KAAMwB,IACNtB,KAAK,SCNNuB,MA/Bf,SAAalC,GAAQ,IAAD,EACQmC,mBAAS,SADjB,mBACX5B,EADW,KACJ6B,EADI,KAelB,OACE,kBAAC,IAAD,CAAe7B,MAAiB,UAAVA,EAAoBQ,EAAaQ,GACrD,yBAAKpB,UAAU,aACf,kBAAC,EAAD,CAAQI,MAAOA,EAAOuB,YAdR,WAGhBM,EADY,UAAV7B,EACO,OAGA,WAQP,gBACA,kBAACiB,EAAD,MACA,kBAAC,IAAD,KACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,cAAcC,UAAWzC,SCrB/B0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxD,QAAQwD,MAAMA,EAAMC,c","file":"static/js/main.8758c7ba.chunk.js","sourcesContent":["import React from 'react'\nimport '../css/home.scss';\nimport '../css/master.scss';\nimport Button from 'react-bootstrap/Button'; \nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faUserCircle, faFileAlt, faCode, faEnvelope } from '@fortawesome/free-solid-svg-icons'\nimport { withTheme } from 'styled-components'\n\nconst Home = (props) => {\n  console.log(props)\n    return (\n      <div className=\"home-container\">\n        <div className=\"home\">\n          <h1 className=\"title\">rashi ghosh</h1>\n          <p className=\"subtitle\">computer science BA | UI/UX fanatic | graphic design hobbiest</p>\n          <hr />\n          <div className=\"nav\">\n            <Button variant=\"link\" >\n              <FontAwesomeIcon\n                color={props.theme.gold}\n                icon={faUserCircle} \n                size='2x'\n              />\n            </Button>\n            <Button variant=\"link\"  >\n            <FontAwesomeIcon\n                color={props.theme.gold}\n                icon={faFileAlt} \n                size='2x'\n              />\n            </Button>\n            <Button variant=\"link\"  >\n            <FontAwesomeIcon\n                color={props.theme.gold}\n                icon={faCode} \n                size='2x'\n              />\n            </Button>\n            <Button variant=\"link\"  >\n            <FontAwesomeIcon\n                color={props.theme.gold}\n                icon={faEnvelope} \n                size='2x'\n              />\n            </Button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  const HomePage = withTheme(Home);\n  export default HomePage;\n","export const lightTheme = {\n  mode: 'light',\n    bg: '#E2E2E2',\n    text: '#525252',\n    lightShadow: '#FFFFFF',\n    darkShadow: '#949494',\n    gold: '#e3a813',\n    toggleBorder: '#FFF',\n    gradient: 'linear-gradient(#39598A, #79D7ED)',\n  }\n  \n  export const darkTheme = {\n    mode: 'dark',\n    bg: '#363537',\n    text: '#FAFAFA',\n    lightShadow: '#7a7a7a',\n    darkShadow: '#000000',\n    gold: '#e3a813',\n    toggleBorder: '#6B8096',\n    gradient: 'linear-gradient(#091236, #1E215D)',\n  }","import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyles = createGlobalStyle`\n  *,\n  *::after,\n  *::before {\n    box-sizing: border-box;\n  }\n\n  html, body, #root {\n    background: ${({ theme }) => theme.bg};\n    color: ${({ theme }) => theme.text};\n    display: flex;\n    flex-direction: column;\n    height: 100% !important;\n    margin: 0;\n    padding: 1px 0;\n    font-family: BlinkMacSystemFont, -apple-system, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;\n    transition: all 0.25s linear;\n  }\n\n\n  .title {\n    color: ${({ theme }) => theme.gold};\n    text-transform: uppercase;\n    font-size: 25px;\n    letter-spacing: 5px;\n  }\n\n  .subtitle {\n    color: ${({ theme }) => theme.text};\n  }\n\n  hr {\n    background-color: ${({ theme }) => theme.gold}!important;\n    height: 0.5px !important;\n    width: 50%;\n  }\n  \n  .btn-link {\n    padding: 15px !important;\n    margin: 10px !important;\n    border: none !important;\n    border-radius: 25px !important;\n    transition: 0.3s ease-in-out !important;\n    background: ${({ theme }) => theme.bg} !important;\n    border-radius: 50px;\n    box-shadow: 12px 12px 16px 0 ${({ theme }) => theme.darkShadow},\n      -5px -3px 16px 0 ${({ theme }) => theme.lightShadow};\n    height: 75px;\n    width: 75px;\n  }\n\n  .btn-link:focus {\n  box-shadow: 10px 10px 16px 0 ${({ theme }) => theme.darkShadow} inset,\n    -5px -3px 16px 0 ${({ theme }) => theme.lightShadow} inset !important;\n}\n`","import React from 'react'\nimport { func, string } from 'prop-types';\nimport styled from 'styled-components';\n// Import a couple of SVG files we'll use in the design: https://www.flaticon.com\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSun, faMoon } from '@fortawesome/free-solid-svg-icons'\n\n\nconst ToggleContainer = styled.button`\n  background: ${({ theme }) => theme.bg};\n  border: 2px solid ${({ theme }) => theme.gold};\n  border-radius: 30px;\n  cursor: pointer;\n  position: absolute;\n  right: 20px;\n  padding: 9px;\n  top: 20px;\n  font-size: 0.5rem;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  overflow: hidden;\n  width: 80px;\n  height: 40px;\n    \n    // sun icon\n    .light {\n      transform: ${({ theme }) => theme.mode === 'light' ? 'translateY(0)' : 'translateY(100px)'};\n    }\n    \n    // moon icon\n    .dark {\n      transform: ${({ theme }) => theme.mode === 'light' ? 'translateY(-100px)' : 'translateY(0)'};\n    }\n  }\n`;\n\nconst Toggle = ({ theme, toggleTheme }) => {\n  return (\n    <ToggleContainer onClick={toggleTheme} >\n       <FontAwesomeIcon className=\"light\"\n                color={\"#e3a813\"}\n                icon={faSun} \n                size='2x'\n              />\n       <FontAwesomeIcon className=\"dark\"\n                color={\"#e3a813\"}\n                icon={faMoon} \n                size='2x'\n              />\n    </ToggleContainer>\n  );\n};\n\nToggle.propTypes = {\n  theme: string.isRequired,\n  toggleTheme: func.isRequired,\n}\n\nexport default Toggle;","import React, { useState } from 'react';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport HomePage from './components/Home'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { ThemeProvider } from 'styled-components';\nimport { lightTheme, darkTheme } from './styles/themes';\nimport { GlobalStyles } from './styles/global';\nimport './css/master.scss';\nimport Toggle from './components/Toggle';\n\n\nfunction App(props) {\n  const [theme, setTheme] = useState('light');\n\n// The function that toggles between themes\nconst toggleTheme = () => {\n  // if the theme is not light, then set it to dark\n  if (theme === 'light') {\n    setTheme('dark');\n  // otherwise, it should be light\n  } else {\n    setTheme('light');\n  }\n}\n\n\n  return (\n    <ThemeProvider theme={theme === 'light' ? lightTheme : darkTheme}>\n      <div className=\"container\">\n      <Toggle theme={theme} toggleTheme={toggleTheme}>Toggle theme</Toggle>\n      <GlobalStyles />\n      <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/portfolio/\" component={HomePage} />\n      </Switch>\n      </BrowserRouter>\n      </div>\n    </ThemeProvider>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}